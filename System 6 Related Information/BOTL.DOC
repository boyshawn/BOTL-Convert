                     BATCH-ORIENTED TRANSACTION LOADER (BOTL)
                                  May 25, 2004

----------------------------------------
INTRODUCTION
----------------------------------------

The Batch-Oriented Transaction Load (BOTL) facility provides a mechanism
for inserting new policies or updating existing policy information using
file input rather than by using the standard on-line system.  Possible
applications of this facility include any policy activities that involve groups
of customers or policies such as batch loading of customers and policies,
upgrades, cancellations, etc.

Ultimately, the goal is make every policy transaction available through
BOTL. This facility should also help open the way to alternate forms
of getting policy data into System 6 (e.g. Internet access, Insurance ATMs,
Bar-Code data, etc.) since the underlying "engine" will provide a
general-purpose data entry mechanism that is not tied to a specific user
interface.

It should be noted that BOTL does not have a "friendly" GUI interface
like the on-line Policy system.  It is batch-oriented, uses text files for
inputs and requires a greater understanding of System 6 data elements
and codes than the on-line system does.  Various utilities and documents
such as this are available to aid in using BOTL and will, hopefully, allow
the power of BOTL to be accessed quickly.


----------------------------------------
FEATURES
----------------------------------------

The major features of BOTL are summarized below...

- A standard input file format is used for policy transaction data.  Third
  party souces will need to be conform to the standard input format or else
  a "translation" program would need to be written to convert data to the
  standard BOTL format.  The BOTLMERG utility is available to convert certain
  types of input formats to the BOTL format.

- BOTL will ultimately be able to duplicate all on-line policy transaction
  types.  This includes customer entry, new policies, endorsements,
  cancellations, adjustments, etc. and encompasses data validation,
  customer de-duplication, print requests and suspensions.

- BOTL follows standard System 6 batch procedures regarding runtime options,
  error logging, reporting, etc.

- BOTL includes a "Merge" capability that allows a transaction "template" to
  be applied to a list of account ids, policy numbers or other data elements.
  This is accomplished with a separate utility (BOTLMERG) that outputs a data
  file in the standard BOTL input format.

- Several utilities, such as BOTLAID and BOTLENUM are available to provide
  useful information for setting up BOTL transactions.

- All transactions that cannot be successfully processed will be added to
  a "reject" file.   This file will also have error information embedded
  in the comments above each rejected transaction explaining the error so that
  corrections can be easily made.  The reject file can then be reprocessed
  once the corrections have been made.

- A "trial run" facility is available that processes the transaction
  up to the point that the data base update is done but then aborts the
  transaction.   This provides a way to check the validity of input
  transactions without actually updating the database.

- A "list file" contains a list of all policies, account ids processed.

- The BIB (BOTL Input Builder) libaries and sample programs are available
  to aid or serve as examples of how a program can be used to create
  BOTL input.

----------------------------------------
ARCHITECTURE
----------------------------------------

The following is a list of the major technical requirements for BOTL...

- All code is C based.  Features are implemented primarily via DLL
  libraries with a view toward creating easy-to-interface modules
  for easier maintenance and extensibility.  The goal was to have a single
  code base for each policy system area thereby avoiding code duplication.

- As with the on-line system, database transaction integrity must be
  preserved, i.e. transactions are "all-or-nothing".

- Easy error diagnosis including error cause, location and suggested
  actions to resolve the error.  Also,  error handling should be handled
  in a standard, identical fashion across all modules.

- High performance.

- Allow easy interfacing with CETS.

- Must handle Double-Byte character input.

- Modular design (Front End, Business Rules, Database access)


----------------------------------------
TRANSACTION INPUT FORMAT
----------------------------------------
Here is a simple BOTL transaction and the rules regarding how it is formed...

begin|1|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Menser|Mark|S|MM||04||||4040404|07|1965-06-06|01|Mark.Menser@ACE-INA.COM
address|new|$_xaddr|Main Street|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
persdemo|new|$_acct1|T1|09|00|00||08|30||11||||
end


1. Each BOTL transaction represents one logical operation on a System 6
   customer or policy.   The type of logical operation is signified by
   the transaction type code, a 3 character code.   Transaction type codes
   include "NEW" for the entry of a new policy, "IDN" for the entry of
   non-policy related customer data and a number of other transaction types
   associated with other policy activities.

2. Some transaction types, such as "NEW" require a lot of information to
   be supplied.  Others, such as "ADJ", (record a payment adjustment) require
   smaller amounts of data to be supplied.  Therefore, unlike FADES, the BOTL
   format size is variable.

3. Data will be input by providing various "data segments" that contain the
   data and the instructions for what to do with the data. Each segment begins
   with an identifying "segment tag" followed by the segment information.
   There is only one data segment per line.

4. A data segment represents one logical group of data such as basic customer
   data or beneficiary information.    Each segment requires a fixed number
   of data fields.  For example, the "basdemo" segment requires 17 data fields.

5. There are numerous different segment types.   A given BOTL transaction
   type will require certain types of segments to be present.  For example,
   a "NEW" transaction requires a minimum of the following segment
   types - "begin", "trannew", "transaction", "master", "policy", "product",
   and "end".   Other segments, such as "beneficiary" may be required if
   a given product requires one.  The rules regarding which segments are
   required for each transaction type are contained in the BOTLAID report
   with additional information in the segments.doc file.

6. Segment data fields are separated by the "|" character.  An empty field
   is designated by two adjacent bars, e.g. field1|field2|field3|| - in this
   example, field4 is empty.

7. A BOTL transaction begins with a "begin" segment and ends with an "end"
   segment.  The BOTL transaction type is specified in the "begin" segment.
   Other than the begin and end segments, the other segments can be inserted
   in the transaction in any order.

8. BOTL allows two types of "macros" to be used in segment data fields.  A
   "macro" is a variable that represents another value in an input field.
   Macros always start with the characters "$_".

   A "function macro" will return a system or database value.  An example of
   this type of macro is the "$_today" macro.   By inserting "$_today" in
   a segment field, the current date will be substituted into that field
   at run time.

   A "system generated macro" is used to represent a value that the system
   will generate when the data is stored in the database.  This type of
   macro is used for new account ids and new address ids.  These are not
   known in advance and therefore cannot be inserted directly into a BOTL
   input file.  The user then creates a macro name, e.g. "$_newacctid" to
   represent these system generated values wherever they need to be
   provided in the transaction input file.

   Currently defined function macros are...

    1. $_null           - Clear a field (only used when updating an existing
                          database field)
    2. $_today          - BOTL run date (e.g. "1998-10-22")
    3. $_timestamp      - BOTL run timestamp (e.g. 1996-11-22-10.10.10.123456)
    4. $_ActiveProduct  - If there is a single PM product associated with a
                          transaction, this macro can be used in place of
                          the product id.
    5. $_HolderAcctID   - The account id of the policy holder.
    6. $_HolderAddrType - The address type (home, work, etc) of policy holder.
    7. $_HolderAddrID   - The address ID of policy holder.
    8. $_PriorPolicy    - Policy number from previous transaction (i.e. policy
                          associated with the previous sequence number)
    9. $_PayerAcctID    - The account id of the policy payer.
   10. $_PreTranPremium - The policy premium before transaction is executed,
                          i.e. the pre-transaction premium.
   
    This list will grow as new macros are identified.

9. Comments and blank lines may be inserted anywhere in the input file.
   The comment character is '#' at the beginning of the line.

10. Coded values that match values stored in the database are used for many
   fields. These coded values include "Message System" values as well as other
   coded values such as credit card codes, bank numbers, etc.   The BOTLAID
   program and segment.txt document help to identify the available codes.

11. A number of segment types require a designation of "new" or "update" to
   indicate if the associated data is new to the database or is an update
   to data already in the database.

12. A user-defined sequence number can be associated with each input
   transaction (in the "begin" segment) for grouping or tracking transactions.

13. The segment tags are not case-sensitive but most segment field values
   ARE case-sensitive (such as many of the code values) so you should
   preserve the case of any field values listed in the segments.doc document
   other input references.

14. Dates are always entered in ISO format - "YYYY-MM-DD", e.g. "1997-07-22".

15. Numeric values should contain only digits and "." for the decimal point,
    if any - i.e. thousands separators, currency symbols, etc. should not
    be included.

16. Strings should not be quoted.  Double-byte strings are supported.

17. Trailing blanks are ignored in all segment field values.

A separate segment definition document (segments.doc) contains a list of
the current transaction segments.   That document should be used as a
reference for field descriptions, datatypes, sizes, which fields are
optional/required and information about permissible values for each field.
The BOTLENUM utility may prove useful in inspecting BOTL input files and
for associating segment input fields with their description in the segments.txt
file.


----------------------------------------
RUNNING BOTL
----------------------------------------

To see BOTL run options, execute "BOTL /?" at a command prompt...

                    ==============================

BOTL - Batch Oriented Transaction Load Program

Options...
   /Database   - Database Name (default = ic2)
   /Log        - Log File Name/Path (default = n:\spufiout\botl.log)
   /Ini        - Ini File Name/Path (default = n:\system6\local\botl.ini)
   /Trace      - Send Trace Info to Log? (Y,N) (default = N)
   /Verify     - Verify Setup and Options Only (Y,N) (default = N)
   /Limit      - Process first <n> transactions (<n>) (default = 999999999)
   /Input      - Transaction Input File Name/Path (default = <none>)
   /List       - Processed Transactions File (default = n:\spufiout\botl.lst)
   /Test       - Test Mode - No Database Update (Y,N) (default = N)
   /Replace    - Replace Data For Duplicate Customers (Y,N) (default = N)

Specify options as /option=<value> on command line or in ini-file.
Note that command line options override ini-file options.

Comments...
   This program provides a batch load facility for System 6 policy
   transactions.  Transaction data is read from an input file and is
   stored in the database.

                    ==============================

Notes about running BOTL...

1. When an error is encountered in a transaction, BOTL ceases to process the
   transaction, writes a message to the error log and writes the errant
   transaction to the reject file.  The errors in the reject file can then
   be corrected and the reject file can be re-submitted to BOTL.

2. The "test" option takes a BOTL transaction to the point of storing it in
   the database and then aborts.   This can be used for testing purposes if
   you don't want to actually update the database.

3. The "list" file contains a list of all new policies and account ids
   that were generated via BOTL transactions.

4. Note that BOTL can be aborted at any time (e.g. Ctrl-Break, closing the
   process, etc.) without fear of database corruption or inconsistency. Of
   course, if BOTL is stopped prematurely, only part of the input file will
   have been processed.

5. When the "replace" option value is "y",  the system will seek to replace
   existing customer info when the new customer info is found to be a
   duplicate of an existing customer.   It the replace option is "n" then
   no replacement will occur for customer related data (basdemo, persdemo,
   address, addrtype and dependent) for the duplicate customer.

The following examples are available as appendices to this document to
demonstrate various system functions...

Example 1   - Adding a new customer to the database (no policy activity).
              Demonstrates: Input file, log file, batch history file, macros.

Example 2   - Processing "new" policies.
              Demonstrates: Product entry, list file, policy rating, error
                            reporting, reject file creation, suspensions,
                            print request.

Example 3   - Processing a "new" package-based policy.
              Demonstrates: Package product entry, "test" option.


----------------------------------------
Data Validation Details
----------------------------------------
BOTL does a great deal of validation to ensure data integrity.  Types of
validation include...

    1. Make sure that all data required for a transaction is present.
    2. Field-level validation (data types, field sizes, required/optional,
       messsage codes and other individual field value checks)
    3. Business rules
        - Package rules
        - Required individuals
        - Billing info
        - Rating information
        - etc. etc.
    4. Customer de-duplication


------------------------------------------------------------------------
SEGMENT NOTES
------------------------------------------------------------------------
The "PREMCHECK" segment provides a check of the premium amount.  If the
premium amount supplied for this segment does not match the premium
amount determined by the rating process then the policy will either be
suspended with a reason code of "PF" or a BOTL error will be reported,
depending upon the PREMCHECK action specified.  

PREMCHECK Examples...
    
      PREMCHECK|10.00|suspend
        Suspend the policy if current BOTL transaction produces a policy
        premium that is not equal to 10.00.

      PREMCHECK|10.00|error
        Report a BOTL transaction error if current BOTL transaction produces
        a policy premium that is not equal to 10.00.

      PREMCHECK|$_PreTranPremium|suspend
        Suspend the policy if current BOTL transaction results in a change
        in the policy premium.

      PREMCHECK|$_PreTranPremium|error
        Report a BOTL transaction error if current BOTL transaction results in
        a change in the policy premium.



------------------------------------------------------------------------
BOTLMERG
------------------------------------------------------------------------

The BOTLMERG utility allows a BOTL input template to be "merged" with a
set of input values.  It will be useful where the same BOTL transaction is
to be applied repeatedly with different input values substituted into the
BOTL transaction.   The template file contains a standard BOTL input
transaction with substitution variables ($$_1, $$_2, etc) inserted as
placeholders for values that will be read from a delimited ascii input
file.  The use of the delimited ascii format should facilitate use of
BOTLMERG with System 6 database exports or data extracted from other
systems.  An example should make this clear...


-----------------------
Template File: merg.tmp
-----------------------
begin|1|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|$$_1|$$_2||MM1||04||||$$_3|07|$$_4|01|new.cust@isp.com
address|new|$_xaddr|$$_5|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
end

----------------------------
Input "merge" File: merg.dat
----------------------------
"Menser1", "Mark1", "10000", "1955-09-02", "address line 1"
"Menser2", "Mark2", "20000", "1956-09-02", "address line 1"
"Menser3", "Mark3", "30000", "1957-09-02", "address line 1"
"Menser4", "Mark4", "40000", "1958-09-02", "address line 1"
"Menser5", "Mark5", "50000", "1959-09-02", "address line 1"

========================================
Run BOTLMERG...

BOTLMERG /indata=merg.dat /template=merg.tmp /ini=botlmerg.ini /outfile=merg.out
========================================

---------------------
Output File: merg.out
---------------------
begin|1|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Menser1|Mark1||MM1||04||||10000|07|1955-09-02|01|
address|new|$_xaddr|address line 1|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
end

begin|2|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Menser2|Mark2||MM1||04||||20000|07|1956-09-02|01|
address|new|$_xaddr|address line 1|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
end

begin|3|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Menser3|Mark3||MM1||04||||30000|07|1957-09-02|01|
address|new|$_xaddr|address line 1|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
end

begin|4|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Menser4|Mark4||MM1||04||||40000|07|1958-09-02|01|
address|new|$_xaddr|address line 1|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
end

begin|5|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Menser5|Mark5||MM1||04||||50000|07|1959-09-02|01|
address|new|$_xaddr|address line 1|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
end



------------------------------------------------------------------------
BOTLAID
------------------------------------------------------------------------

The BOTLAID utility provides helpful information, i.e. a report, on the segment
values for each transaction type.  The BOTLAID report will show allowable
code values, product ids, ranges for certain numeric inputs, etc.   The
BOTLAID report also provides a list of segments that are permitted for a
given transaction type.  BOTLAID is run by simply typing "BOTLAID" at an
OS/2 command prompt.  BOTLAID will prompt the user for the information that
it requires in order to produce the report.   Here is a sample report for
the IDN transaction for a test Hong Kong database...


    ------------------------------------------------------------------------
    BOTLAID Report
    Report Date: 1997-04-11    Report Time: 15.59
    ------------------------------------------------------------------------

    --------------------
    Input Values
    --------------------
    Country is HK
    Language is 01
    BOTL Transaction is IDN

    --------------------
    Segment: ADDRESS
    --------------------

    Codes for Message Category '36' (Provinces)...
    1   Kowloon
    2   New Territories
    3   Hong Kong

    Codes for Message Category '27' (Country)...
    00  Home Office
    HK  Hong Kong
    IN  Indonesia
    UK  United Kingdom

    Company Code...
    001    EASEL

    --------------------
    Segment: ADDRTYPE
    --------------------

    Codes for Message Category '39' (Address Types)...
    01  Home
    02  Mail
    03  Work

    --------------------
    Segment: BASDEMO
    --------------------

    Codes for Message Category '3 ' (Caller Title)...
    01  Mr
    04  Dr
    06  Mdm
    09  Prof
    10  Sir

    Codes for Message Category '21' (Customer Category)...
    aa  Customer Category #1
    ab  Customer Category #2

    Codes for Message Category 'ZA' (Name sequence combination)...
    01  Surname, First
    02  Surname, First , Middle
    06  First , Middle , Surname
    09  First , Middle
    11  First , Surname, Middle
    12  Surname, Middle , First
    13  Surname

    Codes for Message Category '16' (Sex)...
    01  Male
    02  Female

    --------------------
    Segment: DEPENDENT
    --------------------

    Codes for Message Category '32' (Relationships)...
    00  -
    01  Husband
    02  Wife
    03  Son
    04  Daughter
    05  Dependent
    06  Father
    07  Mother
    08  Spouse

    --------------------
    Segment: PERSDEMO
    --------------------

    Codes for Message Category '15' (Prefer Callback)...
    00  Not Applicable
    T1  AM
    T2  PM

    Codes for Message Category '6 ' (Nationality)...
    01  Singaporean
    02  Malaysian
    03  Indonesian
    04  Bruneian
    05  Thai
    24  Hongkong (Chinese)

    Codes for Message Category '7 ' (Race)...
    00  Unknown
    01  Chinese
    02  Malay
    03  Indian

    Codes for Message Category '8 ' (Religion)...
    01  Taoism
    02  Buddhism
    03  Christianity
    04  Nicheren Shoshu
    05  Roman Catholicism

    Codes for Message Category '9 ' (Education)...
    aa  Grade School
    ab  High School
    ac  College

    Codes for Message Category '5 ' (Language)...
    01  English
    02  Spanish
    27  Mandarin
    28  Cantonese

    Codes for Message Category '10' (Occupation)...
    10  Legislator, Mgr.& Sr.Officials
    30  Technicians & Assoc.Profession
    70  Production Craftsmen & others
    90  Cleaners, Labourers & related

    Industry Code...
    CHM  Chemical
    MED  Medical
    TEL  Television
    ENT  Entertainment

    Credit Card Codes...
    11  American Express
    13  Hong Kong MasterCard
    37  Chase Manhattan Visa
    38  Chase Manhattan MasterCard
    19  CitiBank Visa
    23  CitiBank MasterCard
    25  Standard Chartered MasterCard

    --------------------
    Segment: SENSITIVITY
    --------------------

    Codes for Message Category '42' (Sensitivity Code)...
    03  Over Insured
    04  Sensitive - Claims Related
    07  None
    09  Missing : telephone number
    13  Black List - No Sales,UG/AO
    20  Can't Release any data expt CM
    22  CM Req. - Don't Call again.


    ----------------------------------------------------------------------------
    Transaction Segments Allowed for BOTL IDN Transaction
    ----------------------------------------------------------------------------

    Segment                Comments
    ---------------------  -------------------------------------------
    begin                  Required
    tranidn                Required
    basdemo                Provide as needed to add new customer or update existing customer.
    address                Provide as needed to add new address or update existing address.
    addrtype               Provide as needed to assign addresses to customers.
    dependent              Provide as needed to add dependents.
    sensitivity            Provide as needed to add sensitivity to account.
    persdemo               Provide as needed to add new persdemo or update existing persdemo.
    end                    Required

    ------------------
    End of BOTLAID.RPT
    ------------------


------------------------------------------------------------------------
BOTLENUM
------------------------------------------------------------------------
BOTLENUM is a simple utility which will enumerate the fields within a
BOTL input file.  This should prove useful in setting up BOTL segments
especially when used with the segments.doc file.   For example, suppose
the BOTL segment line is the following...

    BEGIN|1234|END|UK|UK0000000012345

The BOTLENUM report would look like the following...
    1 BEGIN
    2 1234
    3 END
    4 UK
    5 UK0000000012345

By referencing the segments.doc file, you could find, for example, that
field 4 for this segment type should be the country code and that its
value is "UK" in this segment.


------------------------------------------------------------------------
BIBMODEL (BOTL INPUT BUILDER Model)
------------------------------------------------------------------------
There may be cases where the data to be processed by BOTL does not arrive
at CIGNA in the standard BOTL format.   In such cases, a program will need
to be written to transform the data from the original format to BOTL format.
These programs may vary considerably depending upon the format of the
original data but some tools/sample code have been provided to make this
process easier.  BIBMODEL provides a model for how to build a program that
will read input text data files and create an output file in BOTL format.
This program is used in conjunction with the BIB.DLL which contains service
routines used by this program.  See BIB.TXT for details of these routines.

Additionally, the BIBFADES program demonstrates how an input file in
FADES format can be transformed into BOTL format.  There are several
varieties of FADES programs so this program should be viewed as a 90%
solution that will still need some tweaking in order to provide a full
FADES-to-BOTL solution.


------------------------------------------------------------------------
HINTS FOR MANUALLY SETTING UP A BOTL TRANSACTION INPUT FILE
------------------------------------------------------------------------

1. Start with a template or sample for the type of transaction that you
   wish to build. The BOTLAID report will indicate which segments are
   needed.

2. Duplicate those rows for which multiple entries are required (e.g.
   BASDEMO) and eliminate those that are not needed (e.g. if beneficiary
   is not required.)

3. Refer to the segments.doc document for information about fields, types,
   lengths, etc. for each segment.

4. Use BOTLAID to produce a report of useful segment codes and values.

5. Run sample transactions through BOTL to receive error reports to see
   if any required data has been omitted, etc.



----------------------------------------
TAKING FULL ADVANTAGE OF BOTL
----------------------------------------

NOTE 1
------
Here are some scenarios where BOTL might prove useful...

1. Batch-load customer lists or policies from third-parties.
2. Write a simple input program in Microsoft Access/Foxpro/etc. that dumps
   input values into a delimited output file.   This file could be created
   under Windows, outsourced, etc. and procecessed into BOTL via BOTLMERG.
3. Using the standard DB2 export command, export list of customers or
   policies for which some transaction activity is to take place such as
   adjustments, cancellations, upgrades, etc.
4. Convert policy data from other policy systems into System 6.
5. Collect name/address information via a Web application and load via
   BOTL into the System 6 database for direct marketing.
6. Receive list of address updates or credit card cancellations from
   sponsors and batch process them.
7. Print documents/mailings for selected customer lists.


NOTE 2
------
As a practical matter, if you are dealing with large numbers of transactions,
you will probably find it easier to deal with several smaller files rather
than a single, very large file but BOTL does not impose any limit on the
size of the input file.


------------------------------------------------------------------------
BOTL WISH LIST
------------------------------------------------------------------------
This section contains some suggestions that I have received for additions
that could be made to BOTL.  If you see something listed here that you
would like to see supported or if you have ideas or suggestions for BOTL
extensions please send an EMAIL to Mark Menser.

1. A single segment that would update the benefit level for all the
   insureds on an individually rated product without requiring "insured"
   segments for each insured.

2. Premium checker.

3. Extensions to allow BOTL to be used for conversions.



------------------------------------------------------------------------
EXAMPLE 1  - Adding a new customer to the database (no policy activity).
             Demonstrates: Input file, log file, batch history file, macros.
------------------------------------------------------------------------
#
# Test for IDN transaction.
#
begin|1|idn|HK|
tranidn|$_acct1
basdemo|new|$_acct1|Kelley|Robert|X|RK||04||||4040404|07|1955-06-06|01|Robert.Kelley@isp.com
basdemo|new|$_acct2|Kelley|Betty|X|BK|Betty X Kelley|01||||5050505|12|1955-06-06|01|
basdemo|new|$_acct3|Kelley|Matt|X|MK|Matt X Kelley|01||||6060605|12|1985-06-06|01|
dependent|new|$_acct1|$_acct2|02
dependent|new|$_acct1|$_acct3|03
address|new|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
addrtype|$_acct2|$_xaddr|01
addrtype|$_acct3|$_xaddr|01
persdemo|new|$_acct1|T1|09|00|00||08|30||11||||
end


----------------------------------------
EXAMPLE 1 - LOG FILE
----------------------------------------
Starting botl processing at 08.56.57 on 1997-03-27.
Error and run info are stored in 'd:\botl\ex1.log'.
Release: DEVELOPMENT    Computer: LIBA52DC    User: CWW67
Current Directory: D:\botl
Command Line Options: /ini=d:\botl\botl.ini /log=d:\botl\ex1.log /input=ex1.in /list=ex1.lst /trace=n /limit=200 /test=n

Run Options...
  Database   : ic2                         Log        : d:\botl\ex1.log
  Ini        : d:\botl\botl.ini            Trace      : n
  Verify     : N                           Limit      : 200
  Input      : D:\botl\ex1.in              List       : ex1.lst
  Test       : n


Processed 16 lines in 1 transaction(s).
1 transaction(s) were successfully processed.
Reject file D:\botl\ex1.r01 contains 0 lines, 0 transactions.

Finished processing at 08.57.07 on 1997-03-27.
Total duration was 0 hours, 0 minutes, 10 seconds.


----------------------------------------
EXAMPLE 1 - LIST FILE
----------------------------------------
Line     Sequence    Policy/New Account IDs
-------  ----------  ---------------------------------------
4        1           ## No Policy ##|   241013|   241014|   241015|


------------------------------------------------------------------------
EXAMPLE 2   - Processing "new" policies.
              Demonstrates: Product entry, list file, policy rating, error
                            reporting, reject file, suspensions, print request.
------------------------------------------------------------------------

# Test for group-rated product.
begin|10|new|HK|
trannew|HK96000801|MM|01|02|03
transaction|$_today|$_acct1|MM|print|some comments
basdemo|new|$_acct1|Kelley|Robert|X|RK||04||||4040404|07|1955-06-06|01|robert.kelley@isp.com
basdemo|new|$_acct2|Kelley|Betty|X|BK|Betty X Kelley|01||||5050505|12|1955-06-06|01|
dependent|new|$_acct1|$_acct2|02
address|new|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
addrtype|$_acct2|$_xaddr|01
persdemo|new|$_acct1|T1|09|00|00||08|30||11||||
sensitivity|$_acct1|02
master|01|01|$_acct1|$_acct1
policy|new|10|M|!12341234|44/44|1234|1234|37|VI|m1|m2|m3|Mark|
product|new|35G|MS|1|5|||1 ||||||2.0|00|0.0|||
insured|new|35G|$_acct1|MI|1|1.0|||||||||
end

# Test for individually rated product
begin|20|new|HK|
trannew|HK96000501|MM
transaction|$_today|$_acct1|MM|noprint|some comments
basdemo|new|$_acct1|Kelley|Robert|X|RK||04||||4040404|07|1955-06-06|01|robert.kelley@isp.com
basdemo|new|$_acct2|Kelley|Betty|X|BK|Betty X Kelley|01||||5050505|12|1955-06-06|01|
dependent|new|$_acct1|$_acct2|02
address|new|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
addrtype|$_acct2|$_xaddr|01
master|01|01|$_acct1|$_acct1
policy|new|10|M|!12341234|44/44|1234|1234|11|VI|m1|m2|m3|Mark|
product|new|35I|MS|1|5|XX|XX|1 ||||||2.0|00|0.0|||
insured|new|35I|$_acct1|MI|1|1.0||01|04|06|||||
insured|new|35I|$_acct2|SP|1|1.0||02|04|06|||||
end

# Demonstrate error logging - invalid payment frequency.
begin|30|new|HK|
trannew|HK96000501|MM
transaction|$_today|$_acct1|MM|print|some comments
basdemo|new|$_acct1|Kelley|Robert|X|RK||04||||4040404|07|1955-06-06|01|robert.kelley@isp.com
address|new|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
master|01|01|$_acct1|$_acct1
policy|new|10|Q|!12341234|44/44|1234|1234|11|VI|m1|m2|m3|Mark|
product|new|35I|MO|1|5|XX|XX|1 ||||||2.0|00|0.0|||
insured|new|35I|$_acct1|MI|1|1.0||01|04|06|||||
end

----------------------------------------
EXAMPLE 2 - LOG FILE
----------------------------------------

Starting botl processing at 09.43.34 on 1997-03-27.
Error and run info are stored in 'd:\ex2.log'.
Release: DEVELOPMENT    Computer: LIBA52DC    User: CWW67
Current Directory: D:\BOTL
Command Line Options: /ini=botl.ini /log=d:\ex2.log /input=ex2.in /list=ex2.lst /trace=n /limit=200 /test=n

Run Options...
  Database   : ic2                         Log        : d:\ex2.log
  Ini        : botl.ini                    Trace      : n
  Verify     : N                           Limit      : 200
  Input      : D:\BOTL\ex2.in              List       : ex2.lst
  Test       : n

*** ERROR *** : Specified Payment Frequency is not allowed for campaign split HK96000501.
                (Sequence Number: 30, Line: 48, Column: 10, Field: 3)
    Error Type: BCK  Primary Code: 1  Secondary Code: 30
    Location  : botlchk/BCKCheckPOLICY

Processed 51 lines in 3 transaction(s).
2 transaction(s) were successfully processed.
Reject file D:\BOTL\ex2.r06 contains 19 lines, 1 transactions.

Finished processing at 09.43.47 on 1997-03-27.
Total duration was 0 hours, 0 minutes, 13 seconds.


----------------------------------------
EXAMPLE 2 - LIST FILE
----------------------------------------
Line     Sequence    Policy/New Account IDs
-------  ----------  ---------------------------------------
4        10          HMKHK0000183496|   241038|   241039|
23       20          HMKHK0000183497|   241040|   241041|



----------------------------------------
EXAMPLE 2 - REJECT FILE
----------------------------------------
####|
####| This is the BOTL reject file for D:\BOTL\ex2.in
####| Created 1997-03-27-09.43.36.820000
####|
####|--------------------------------------------
####|*** ERROR *** : Specified Payment Frequency is not allowed for campaign split HK96000501.
####|                (Sequence Number: 30, Line: 48, Column: 10, Field: 3)
####|    Error Type: BCK,  Primary Code: 1,  Secondary Code: 30
####|    Location  : botlchk/BCKCheckPOLICY
####|    Next line was line 38 in BOTL input file.
#
# Demonstrate error logging - invalid payment frequency.
#
begin|30|new|HK|
trannew|HK96000501|MM
transaction|$_today|$_acct1|MM|print|some comments
basdemo|new|$_acct1|Kelley|Robert|X|RK||04||||4040404|07|1955-06-06|01|robert.kelley@isp.com
address|new|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
master|01|01|$_acct1|$_acct1
policy|new|10|Q|!12341234|44/44|1234|1234|11|VI|m1|m2|m3|Mark|
product|new|35I|MS|1|5|XX|XX|1 ||||||2.0|00|0.0|||
insured|new|35I|$_acct1|MI|1|1.0||01|04|06|||||
end


------------------------------------------------------------------------
EXAMPLE 3   - Processing a "new" package-based policy.
              Demonstrates: Package product entry, "test" option.
------------------------------------------------------------------------

# Test package entry.
begin|97531|new|HK|
basdemo|new|$_acct1|Kelley|Robert|X|RK||04||||4040404|07|1955-06-06|01|robert.kelley@isp.com
basdemo|new|$_acct2|Kelley|Betty|X|BK|Betty X Kelley|01||||5050505|12|1955-06-06|01|
basdemo|new|$_acct3|Kelley|Matt|X|MK|Matt X Kelley|01||||6060605|12|1985-06-06|01|
dependent|new|$_acct1|$_acct2|02
dependent|new|$_acct1|$_acct3|03
address|new|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||
addrtype|$_acct1|$_xaddr|01
addrtype|$_acct2|$_xaddr|01
addrtype|$_acct3|$_xaddr|01
persdemo|new|$_acct1|T1|09|00|00||08|30||11||||
sensitivity|$_acct1|02
trannew|HK95000301|MM
transaction|$_today|$_acct1|MM|print|some comments
master|01|01|$_acct1|$_acct1
policy|new|10|M|!12341234|44/44|1234|1234|11|VI|m1|m2|m3|Mark|
product|new|P13|MO|1|5|||||||||1.0|00|0.0|||
product|new|P14|MO|1|5|||||||||1.0|00|0.0|||
product|new|P15|MO|1|5|||||||||1.0|00|0.0|||
insured|new|P13|$_acct1|MI|1|1.0|||||||||
insured|new|P14|$_acct1|MI|1|1.0|||||||||
insured|new|P15|$_acct1|MI|1|1.0|||||||||
beneficiary|new|P14|$_acct1|no beneficiary|||||
end



----------------------------------------
EXAMPLE 3 - LOG FILE
----------------------------------------


Starting botl processing at 16.11.30 on 1997-04-11.
Error and run info are stored in 'ex3.log'.
Release: DEVELOPMENT    Computer: LIBA52DC    User: CWW67
Current Directory: D:\botl
Command Line Options: /ini=botl.ini /log=ex3.log /input=ex3.in /list=ex3.lst /trace=n /limit=200 /test=y

Run Options...
  Database   : ic2                         Log        : ex3.log
  Ini        : botl.ini                    Trace      : n
  Verify     : N                           Limit      : 200
  Input      : D:\botl\ex3.in              List       : ex3.lst
  Test       : y


**********************************************************************
***** WARNING: TEST OPTION IS ON -- DATABASE WILL NOT BE UPDATED *****
**********************************************************************

*** ERROR *** : Transaction was successful but NOT committed to database. (botltran action 98) (Sequence Number: 97531, Line: 1)
    Error Type: BTN  Primary Code: 99999  Secondary Code: 99999
    Location  : botltran
    RecvBuff  : >>>30|Kelley|Robert|X|RK|X Robert Kelley|04||||1997-04-11|$_acct1|4040404|07|1955-06-06|01|robert.kelley@isp.com>>>30|Kelley|Betty|X|BK|Betty X Kelley|01||||1997-04-11|$_acct2|5050505|12|1955-06-06|01|>>>30|Kelley|Matt|X|MK|Matt X Kelley|01||||1997-04-11|$_acct3|6060605|12|1985-06-06|01|>>>32|$_xaddr|line 1b|line 2|line 3|line 4|19087|Wayne|1 |HK|1357913|1234567||>>>34|$_acct1|$_xaddr|01|>>>34|$_acct2|$_xaddr|01|>>>34|$_acct3|$_xaddr|01|>>>35|$_acct1|$_acct2|02|>>>35|$_acct1|$_acct3|03|>>>36|$_acct1|T1|09|00|00

Processed 26 lines in 1 transaction(s).
0 transaction(s) were successfully processed.
Avg Transaction Time:  8.94 sec.,   Max Transaction Time:  8.94 sec. (1)
Reject file D:\botl\ex3.r11 contains 31 lines, 1 transactions.

Finished processing at 16.11.41 on 1997-04-11.
Total duration was 0 hours, 0 minutes, 11 seconds.



------------------------------------------------------------------------
EXAMPLE 4   - Supending a policy. (PND transaction)
------------------------------------------------------------------------
begin|97531|PND|PK|KCHPK0000002840
tranpnd|01
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
end

------------------------------------------------------------------------
EXAMPLE 5   - Posting a credit adjustment to a policy. (ADJ transaction)
------------------------------------------------------------------------
begin|97531|ADJ|PK|KCHPK0000002840
tranadj||-123.45|01|00
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
end

------------------------------------------------------------------------
EXAMPLE 6   - Cancelling a policy without a refund. (CPN transaction)
------------------------------------------------------------------------
begin|97531|CPN|PK|KCHPK0000002840
trancpn|01
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
end

------------------------------------------------------------------------
EXAMPLE 7   - Cancelling a policy with a refund. (CPR transaction)
------------------------------------------------------------------------
begin|97531|CPR|PK|KCHPK0000002840
trancpr|01
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
end


------------------------------------------------------------------------
EXAMPLE 8   - Reinstating a cancelled policy. (RNS transaction)
------------------------------------------------------------------------
begin|97531|RNS|PK|KCHPK0000002840
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
end



------------------------------------------------------------------------
EXAMPLE 9   - Upgrade an individually rated product.  Insureds are raised
              to a new benefit level. (UPC transaction)
------------------------------------------------------------------------
begin|97531|upc|PK|DHCPK0000002832
tranupc|PK97000801|DHC|MM|||
transaction|$_today|3796|MM|noprint|some comments|
insured|update|DHC|3796||3||||||||||
insured|update|DHC|3797||3||||||||||
end


------------------------------------------------------------------------
EXAMPLE 10  - Upgrade an individually rated product to a new product. (UPC)
------------------------------------------------------------------------
begin|97531|upc|PK|DHCPK0000002836
tranupc|PK97000902|DHC|MM|||
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
product|new|KHC|MS|1|5|||||||||1.0|00|0.0|||
insured|new|KHC|$_HolderAcctID|MI|1|1.0|||||||||
insured|new|KHC|3805|SP|1|1.0|||||||||
end

------------------------------------------------------------------------
EXAMPLE 11  - Product Add-On.  (ADD transaction)
------------------------------------------------------------------------
begin|97531|add|PK|DHCPK0000002844
tranadd|PK97000904|MM|||
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
product|new|P01|MS|1|5|||||||||1.0|00|0.0|||
insured|new|P01|3987|MI|1|1.0|||||||||
insured|new|P01|3988|SP|1|1.0|||||||||
end


------------------------------------------------------------------------
EXAMPLE 12  - Product/Package Add-On Cancellation.  (CAN transaction - no refund)
------------------------------------------------------------------------
begin|97531|car|PK|DHCPK0000003606
trancan|DHC|50
transaction|1997-12-01|$_HolderAcctID|MM|print|some comments|
end

------------------------------------------------------------------------
EXAMPLE 13  - Product/Package Add-On Cancellation.  (CAR transaction - with refund)
------------------------------------------------------------------------
begin|97531|car|PK|DHCPK0000003606
trancar|DHC|50|0.0
transaction|1997-12-01|$_HolderAcctID|MM|print|some comments|
end


------------------------------------------------------------------------
EXAMPLE 14  - Remove suspension.
------------------------------------------------------------------------
begin|97531|pnr|PK|DHCPK0000003611
tranpnr|01|MM
end

------------------------------------------------------------------------
EXAMPLE 15  - Remove suspension and change the effective and billed
              thru dates. ONLY valid for PND code 99 and billed thru
              cannot be later than 1 month from effective date.
------------------------------------------------------------------------
begin|97531|pnr|PK|DHCPK0000003611
tranpnr|99|MM|1999-03-13|1999-04-13
end

------------------------------------------------------------------------
EXAMPLE 16  - Endorsement, change credit card number
------------------------------------------------------------------------
begin|97531|end|PK|DHCPK0000002842
tranend|MM|||
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
policy|update|||987654321||||||||||
end

------------------------------------------------------------------------
EXAMPLE 17  - Endorsement, change benefit level for group-rated product
------------------------------------------------------------------------
begin|97531|end|PK|VIPPK0000002838
tranend|MM|||
transaction|$_today|$_HolderAcctID|MM|noprint|some comments|
product|update|ADO||3|||||||||||||||
end

------------------------------------------------------------------------
EXAMPLE 18 - Merge, Merges the second account id into the first
------------------------------------------------------------------------
begin|97352|MRG|NE|
merge|108195|108200
end

------------------------------------------------------------------------
EXAMPLE 19 - Purge, Removes the account id from database tables if NO 
			 policy activity exists for the id.
------------------------------------------------------------------------
begin|97352|PRG|NE|
purge|108195
end



